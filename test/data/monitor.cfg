process MONITOR = { 

     module ecalEBunpacker = EcalDCCUnpackingModule{ }

     module ecalUncalibHitMaker = EcalFixedAlphaBetaFitUncalibRecHitProducer{
#     module ecalUncalibHitMaker = EcalWeightUncalibRecHitProducer{
#     module ecalUncalibHitMaker = EcalAnalFitUncalibRecHitProducer{
       InputTag EBdigiCollection = ecalEBunpacker:
       InputTag EEdigiCollection = ecalEBunpacker:
       string EBhitCollection  = "EcalUncalibRecHitsEB"
       string EEhitCollection  = ""
       untracked int32 nMaxPrintout = 0
     }

     module ecalRecHitMaker = EcalRecHitProducer{
       InputTag EBuncalibRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
       InputTag EEuncalibRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEE
       string EBrechitCollection = "EcalRecHitsEB"
       string EErechitCollection = ""
       untracked int32 nMaxPrintout = 0
     }

     module ecalMonitorModule = EcalBarrelMonitorModule{
       InputTag EcalTBEventHeader = ecalEBunpacker:
       InputTag EcalRawDataCollection = ecalEBunpacker:
       InputTag EBDigiCollection = ecalEBunpacker:
       InputTag EcalUncalibratedRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
#       untracked string outputFile = 'EcalBarrelMonitorModule.root'
#       untracked bool verbose = true
#       untracked bool enableMonitorDaemon = false
#       untracked bool enableEventDisplay = true
        untracked int32 runNumber = 6100
#       untracked int32 runType = -1
     }

     module ecalOccupancyTask = EBOccupancyTask{
       InputTag EBDigiCollection = ecalEBunpacker:
       InputTag EcalPnDiodeDigiCollection = ecalEBunpacker:
     }
     module ecalIntegrityTask = EBIntegrityTask{
       InputTag EBDetIdCollection0 = ecalEBunpacker:EcalIntegrityDCCSizeErrors
       InputTag EBDetIdCollection1 = ecalEBunpacker:EcalIntegrityGainErrors
       InputTag EBDetIdCollection2 = ecalEBunpacker:EcalIntegrityChIdErrors
       InputTag EBDetIdCollection3 = ecalEBunpacker:EcalIntegrityGainSwitchErrors
       InputTag EBDetIdCollection4 = ecalEBunpacker:EcalIntegrityGainSwitchStayErrors
       InputTag EcalTrigTowerDetIdCollection1 = ecalEBunpacker:EcalIntegrityTTIdErrors
       InputTag EcalTrigTowerDetIdCollection2 = ecalEBunpacker:EcalIntegrityBlockSizeErrors
       InputTag EcalElectronicsIdCollection1 = ecalEBunpacker:EcalIntegrityMemTtIdErrors
       InputTag EcalElectronicsIdCollection2 = ecalEBunpacker:EcalIntegrityMemBlockSize
       InputTag EcalElectronicsIdCollection3 = ecalEBunpacker:EcalIntegrityMemChIdErrors
       InputTag EcalElectronicsIdCollection4 = ecalEBunpacker:EcalIntegrityMemGainErrors
     }
     module ecalCosmicTask = EBCosmicTask{
       InputTag EcalRawDataCollection = ecalEBunpacker:
       InputTag EcalRecHitCollection = ecalRecHitMaker:EcalRecHitsEB
     }
     module ecalLaserTask = EBLaserTask{
       InputTag EcalRawDataCollection = ecalEBunpacker:
       InputTag EBDigiCollection = ecalEBunpacker:
       InputTag EcalPnDiodeDigiCollection = ecalEBunpacker:
       InputTag EcalUncalibratedRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
     }
     module ecalPedestalOnlineTask = EBPedestalOnlineTask{
       InputTag EBDigiCollection = ecalEBunpacker:
     }
     module ecalPedestalTask = EBPedestalTask{
       InputTag EcalRawDataCollection = ecalEBunpacker:
       InputTag EBDigiCollection = ecalEBunpacker:
       InputTag EcalPnDiodeDigiCollection = ecalEBunpacker:
     }
     module ecalTestPulseTask = EBTestPulseTask{
       InputTag EcalRawDataCollection = ecalEBunpacker:
       InputTag EBDigiCollection = ecalEBunpacker:
       InputTag EcalPnDiodeDigiCollection = ecalEBunpacker:
       InputTag EcalUncalibratedRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
     }
     module ecalTriggerTowerTask = EBTriggerTowerTask{
       InputTag EcalTrigPrimDigiCollection = ecalEBunpacker:
       InputTag EcalUncalibratedRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
     }
     module ecalTimingTask = EBTimingTask{
       InputTag EcalUncalibratedRecHitCollection = ecalUncalibHitMaker:EcalUncalibRecHitsEB
     }

     module preScaler = Prescaler{ int32 prescaleFactor = 1 }

     sequence s1 = { preScaler, ecalEBunpacker,
                     ecalUncalibHitMaker, ecalRecHitMaker }

     sequence s2 = { ecalMonitorModule }

     sequence s3 = { ecalOccupancyTask,
                     ecalIntegrityTask,
                     ecalCosmicTask,
                     ecalLaserTask,
                     ecalPedestalOnlineTask, ecalPedestalTask,
                     ecalTestPulseTask,
                     ecalTriggerTowerTask,
                     ecalTimingTask }

     path p = { s1, s2 }
     endpath q = { s3 }

     source = DAQEcalTBInputService{ 
#       untracked int32 maxEvents = 150
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000006100-SM5-COSMIC-STD' }
#       untracked bool isBinary = false
#--
#       untracked vstring fileNames = { 'file:/tmp/H4-000006187-SM5-LASER-STD' }
#       untracked bool isBinary = false
#---
       untracked vstring fileNames = { 'file:/tmp/H4-000008203-SM5-PEDESTAL-STD' }
       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000008205-SM5-TEST_PULSE-MGPA' }
#       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000008206-SM5-COSMIC-STD' }
#       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000015188-SM5-COSMIC-STD' }
#       untracked bool isBinary = true
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000015292-SM5-LASER-STD' }
#       untracked bool isBinary = true
     }

     es_source = EcalTrivialConditionRetriever{
       untracked double adcToGeVEBConstant = 0.00875
       untracked vdouble amplWeights = { -0.333, -0.333, -0.333,
                                          0.000,  0.000,  1.000,
                                          0.000,  0.000,  0.000,  0.000 }
       untracked vdouble pedWeights  = {  0.333,  0.333,  0.333,
                                          0.000,  0.000,  0.000,
                                          0.000,  0.000,  0.000,  0.000 }
       untracked vdouble jittWeights = {  0.040,  0.040,  0.040,
                                          0.000,  1.320, -0.050,
                                         -0.500, -0.500, -0.400,  0.000 }
     }

     service = MessageLogger{
       untracked vstring destinations = { "cout" }
       untracked vstring categories = { "EcalTBInputService",
                                        "EcalTBRawToDigi",
                                        "EcalTBRawToDigiTriggerType",
                                        "EcalTBRawToDigiTpg",
                                        "EcalTBRawToDigiNumTowerBlocks",
                                        "EcalTBRawToDigiTowerId",
                                        "EcalTBRawToDigiTowerSize",
                                        "EcalTBRawToDigiChId",
                                        "EcalTBRawToDigiGainZero",
                                        "EcalTBRawToDigiGainSwitch",
                                        "EcalTBRawToDigiDccBlockSize",
                                        "EcalBarrelMonitor"
                                      }
       untracked PSet cout = {
         untracked string threshold = "WARNING"
         untracked PSet default                        = { untracked int32 limit = 0 }
         untracked PSet EcalTBInputService             = { untracked int32 limit = 0 }
         untracked PSet EcalTBRawToDigi                = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTriggerType     = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTpg             = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiNumTowerBlocks  = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTowerId         = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTowerSize       = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiChId            = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiGainZero        = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiGainSwitch      = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiDccBlockSize    = { untracked int32 limit = 1000 }
         untracked PSet EcalBarrelMonitor              = { untracked int32 limit = 0 }
         untracked bool noTimeStamps = true
         untracked bool noLineBreaks = true
       }
     }

     service = DaqMonitorROOTBackEnd{ }

     service = MonitorDaemon{
       # if true, will automatically start DQM thread in background
       # (default: false)
       untracked bool AutoInstantiate = true

       # if >=0, upon a connection problem, the source will automatically 
       # attempt to reconnect with a time delay (secs) specified here 
       # (default: 5)
       untracked int32 reconnect_delay = 5

       # collector hostname
       # (default: localhost)
       untracked string DestinationAddress = "localhost"

       # port for communicating with collector
       # (default: 9090)
       untracked int32 SendPort = 9090

       # monitoring period in ms (i.e. how often monitoring elements 
       # are shipped to the collector
       # (default: 1000)
       untracked int32 UpdateDelay = 500

       # name of DQM source
       # (default: DQMSource)
       untracked string NameAsSource = "FU0"
     }

}
